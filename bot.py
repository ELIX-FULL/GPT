from gpytranslate import Translator

from os import getenv
from tiktoken import encoding_for_model

from db import DataBase
from openaitools import OpenAiTools
from stablediffusion import StableDiffusion
from cryptopay import CryptoPay

from dotenv import load_dotenv
from aiofiles.os import remove

import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types.input_file import FSInputFile
from aiogram import F


class States(StatesGroup):
    ENTRY_STATE = State()
    CHATGPT_STATE = State()
    DALL_E_STATE = State()
    STABLE_STATE = State()
    INFO_STATE = State()
    PURCHASE_STATE = State()
    PURCHASE_CHATGPT_STATE = State()
    PURCHASE_DALL_E_STATE = State()
    PURCHASE_STABLE_STATE = State()


dp = Dispatcher()


# Starts a conversation
@dp.message(Command('start'))
@dp.message(States.ENTRY_STATE, F.text.regexp(r'^üîôBack$'))
@dp.message(States.CHATGPT_STATE, F.text.regexp(r'^üîôBack$'))
@dp.message(States.DALL_E_STATE, F.text.regexp(r'^üîôBack$'))
@dp.message(States.STABLE_STATE, F.text.regexp(r'^üîôBack$'))
@dp.message(States.INFO_STATE, F.text.regexp(r'^üîôBack$'))
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    result = await DataBase.is_user(user_id)

    button = [[KeyboardButton(text="üí≠–û–±—â–µ–Ω–∏–µ ‚Äî ChatGPT")],
              [KeyboardButton(text="üåÑ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Äî DALL¬∑E")],
              [KeyboardButton(text="üåÖ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Äî Stable Diffusion")],
              [KeyboardButton(text="üë§–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç | üí∞–ö—É–ø–∏—Ç—å")]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard=button, resize_keyboard=True
    )

    if not result:
        await DataBase.insert_user(user_id, username)
        await message.answer(
            text="üëã–£ –≤–∞—Å –µ—Å—Ç—å: \nüí≠3000 —Ç–æ–∫–µ–Ω–æ–≤ ChatGPT \nüåÑ3 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DALL¬∑E \nüåÖ3 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π STABLE DIFFUSION –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π \n –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç: üëá \n –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=reply_markup,
        )
    else:
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç: üëáüèª \n –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.",
            reply_markup=reply_markup,
        )
    await state.set_state(States.ENTRY_STATE)


# Question Handling
@dp.message(States.ENTRY_STATE, F.text.regexp(r'^üí≠–û–±—â–µ–Ω–∏–µ ‚Äî ChatGPT$'))
@dp.message(States.ENTRY_STATE, F.text.regexp(r'^üåÑ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Äî DALL¬∑E$'))
@dp.message(States.ENTRY_STATE, F.text.regexp(r'^üåÖ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Äî Stable Diffusion$'))
async def question_handler(message: types.Message, state: FSMContext):
    button = [[KeyboardButton(text="üîôBack")]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard=button, resize_keyboard=True
    )
    await message.answer(
        text="Enter your text: üëáüèª",
        reply_markup=reply_markup,
    )
    option = message.text
    if option == "üí≠–û–±—â–µ–Ω–∏–µ ‚Äî ChatGPT":
        await state.set_state(States.CHATGPT_STATE)
    elif option == "üåÑ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Äî DALL¬∑E":
        await state.set_state(States.DALL_E_STATE)
    elif option == "üåÖ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Äî Stable Diffusion":
        await state.set_state(States.STABLE_STATE)


# Answer Handling
@dp.message(States.CHATGPT_STATE, F.text)
async def chatgpt_answer_handler(message: types.Message, state: FSMContext):
    button = [[KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard=button, resize_keyboard=True
    )

    user_id = message.from_user.id
    result = await DataBase.get_chatgpt(user_id)

    if result > 0:
        question = message.text

        answer = await OpenAiTools.get_chatgpt(question)

        if answer:
            await message.answer(
                text=answer,
                reply_markup=reply_markup,
            )
            result -= len(await asyncio.get_running_loop().run_in_executor(None, encoding.encode, question + answer))
            if result > 0:
                await DataBase.set_chatgpt(user_id, result)
            else:
                await DataBase.set_chatgpt(user_id, 0)
        else:
            await message.answer(
                text="‚ùå–í–∞—à –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                reply_markup=reply_markup,
            )

    else:
        await message.answer(
            text="‚ùé–£ –≤–∞—Å 0 —Ç–æ–∫–µ–Ω–æ–≤ ChatGPT. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –∏—Ö, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ChatGPT.",
            reply_markup=reply_markup,
        )
    await state.set_state(States.CHATGPT_STATE)


# Answer Handling
@dp.message(States.DALL_E_STATE, F.text)
async def dall_e_answer_handler(message: types.Message, state: FSMContext):
    button = [[KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard=button, resize_keyboard=True
    )

    user_id = message.from_user.id
    result = await DataBase.get_dalle(user_id)

    if result > 0:
        question = message.text

        prompt = await translator.translate(question, targetlang='en')

        answer = await OpenAiTools.get_dalle(prompt.text)

        if answer:
            await message.answer_photo(
                photo=answer,
                reply_markup=reply_markup,
                caption=question,
            )
            result -= 1
            await DataBase.set_dalle(user_id, result)
        else:
            await message.answer(
                text="‚ùå–í–∞—à –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                reply_markup=reply_markup,
            )
    else:
        await message.answer(
            text="‚ùé–£ –≤–∞—Å 0 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DALL¬∑E. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –∏—Ö, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DALL¬∑E.",
            reply_markup=reply_markup,
        )
    await state.set_state(States.DALL_E_STATE)


# Answer Handling
@dp.message(States.STABLE_STATE, F.text)
async def stable_answer_handler(message: types, state: FSMContext):
    button = [[KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard=button, resize_keyboard=True
    )

    user_id = message.from_user.id
    result = await DataBase.get_stable(user_id)

    if result > 0:

        question = message.text

        prompt = await translator.translate(question, targetlang='en')

        path = await asyncio.get_running_loop().run_in_executor(None, StableDiffusion.get_stable, prompt.text)

        if path:
            await message.answer_photo(
                photo=FSInputFile(path),
                reply_markup=reply_markup,
                caption=question,
            )
            await remove(path)
            result -= 1
            await DataBase.set_stable(user_id, result)
        else:
            await message.answer(
                text="‚ùå–í–∞—à –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ API –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                reply_markup=reply_markup,
            )
    else:
        await message.answer(
            text="‚ùé–£ –≤–∞—Å 0 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π STABLE DIFFUSION. –í–∞–º –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏—Ö, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Stable Diffusion.",
            reply_markup=reply_markup,
        )
    await state.set_state(States.STABLE_STATE)


# Displays information about user
@dp.message(States.ENTRY_STATE, F.text.regexp(r'^üë§–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç | üí∞–ö—É–ø–∏—Ç—å$'))
@dp.message(States.PURCHASE_STATE, F.text.regexp(r'^üîô–ù–∞–∑–∞–¥'))
async def display_info(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    result = await DataBase.get_userinfo(user_id)

    button = [[KeyboardButton(text="üí∞–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")], [KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard=button, resize_keyboard=True
    )
    await message.answer(
        text=f"–£ —Ç–µ–±—è –µ—Å—Ç—å: \n üí≠{result[2]} ChatGPT —Ç–æ–∫–µ–Ω–æ–≤ \n üåÑ{result[3]} DALL¬∑E –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π \n üåÖ{result[4]} Stable Diffusion –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  \n üí∏ –¢—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –±–æ–ª—å—à–µ —Å –ø–æ–º–æ—â—å—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
        reply_markup=reply_markup,
    )
    await state.set_state(States.INFO_STATE)


# Displays goods
@dp.message(States.INFO_STATE, F.text.regexp(r'^üí∞–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏$'))
@dp.message(States.PURCHASE_CHATGPT_STATE, F.text.regexp(r'^üîô–ù–∞–∑–∞–¥$'))
@dp.message(States.PURCHASE_DALL_E_STATE, F.text.regexp(r'^üîô–ù–∞–∑–∞–¥$'))
@dp.message(States.PURCHASE_STABLE_STATE, F.text.regexp(r'^üîô–ù–∞–∑–∞–¥$'))
async def purchase(message: types.Message, state: FSMContext):
    button = [[KeyboardButton(text="100K ChatGPT —Ç–æ–∫–µ–Ω–æ–≤ - 5 USDüíµ")],
              [KeyboardButton(text="100 DALL¬∑E –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - 5 USDüíµ")],
              [KeyboardButton(text="100 Stable Diffusion –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - 5 USDüíµ")],
              [KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard=button, resize_keyboard=True
    )
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: üëá",
        reply_markup=reply_markup,
    )
    await state.set_state(States.PURCHASE_STATE)


# Displays cryptocurrencies
@dp.message(States.PURCHASE_STATE, F.text.regexp(r'^100K ChatGPT —Ç–æ–∫–µ–Ω–æ–≤ - 5 USDüíµ$'))
@dp.message(States.PURCHASE_STATE, F.text.regexp(r'^100 DALL¬∑E –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - 5 USDüíµ$'))
@dp.message(States.PURCHASE_STATE, F.text.regexp(r'^100 Stable Diffusion –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - 5 USDüíµ$'))
async def currencies(message: types.Message, state: FSMContext):
    buttons = [
        [KeyboardButton(text="üí≤USDT"),
         KeyboardButton(text="üí≤TON")],
        [KeyboardButton(text="üí≤BTC"),
         KeyboardButton(text="üí≤ETH")],
        [KeyboardButton(text="üîô–ù–∞–∑–∞–¥")]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É: üëá",
        reply_markup=keyboard,
    )
    product = message.text
    if product == "100K ChatGPT —Ç–æ–∫–µ–Ω–æ–≤ - 5 USDüíµ":
        await state.set_state(States.PURCHASE_CHATGPT_STATE)
    elif product == "100 DALL¬∑E –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - 5 USDüíµ":
        await state.set_state(States.PURCHASE_DALL_E_STATE)
    elif product == "100 Stable Diffusion –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - 5 USDüíµ":
        await state.set_state(States.PURCHASE_STABLE_STATE)


# Makes invoice and displays it
@dp.message(States.PURCHASE_CHATGPT_STATE, F.text.regexp(r'^üí≤USDT$'))
@dp.message(States.PURCHASE_CHATGPT_STATE, F.text.regexp(r'^üí≤TON$'))
@dp.message(States.PURCHASE_CHATGPT_STATE, F.text.regexp(r'^üí≤BTC$'))
@dp.message(States.PURCHASE_CHATGPT_STATE, F.text.regexp(r'^üí≤ETH$'))
@dp.message(States.PURCHASE_DALL_E_STATE, F.text.regexp(r'^üí≤USDT$'))
@dp.message(States.PURCHASE_DALL_E_STATE, F.text.regexp(r'^üí≤TON$'))
@dp.message(States.PURCHASE_DALL_E_STATE, F.text.regexp(r'^üí≤BTC$'))
@dp.message(States.PURCHASE_DALL_E_STATE, F.text.regexp(r'^üí≤ETH$'))
@dp.message(States.PURCHASE_STABLE_STATE, F.text.regexp(r'^üí≤USDT$'))
@dp.message(States.PURCHASE_STABLE_STATE, F.text.regexp(r'^üí≤TON$'))
@dp.message(States.PURCHASE_STABLE_STATE, F.text.regexp(r'^üí≤BTC$'))
@dp.message(States.PURCHASE_STABLE_STATE, F.text.regexp(r'^üí≤ETH$'))
async def buy(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    currency = message.text
    invoice_url, invoice_id = await CryptoPay.create_invoice(5, currency[1:])
    current_state = await state.get_state()
    product = ''
    if current_state == States.PURCHASE_CHATGPT_STATE:
        product = '100K ChatGPT —Ç–æ–∫–µ–Ω–æ–≤ - 5 USDüíµ'
        await DataBase.new_order(invoice_id, user_id, 'chatgpt')
    elif current_state == States.PURCHASE_DALL_E_STATE:
        product = '100 DALL¬∑E –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - 5 USDüíµ'
        await DataBase.new_order(invoice_id, user_id, 'dall_e')
    elif current_state == States.PURCHASE_STABLE_STATE:
        product = '100 Stable Diffusion –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - 5 USDüíµ'
        await DataBase.new_order(invoice_id, user_id, 'stable')
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∞–ö—É–ø–∏—Ç—å", url=invoice_url),
             InlineKeyboardButton(text="‚òëÔ∏è–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=str(invoice_id))],
        ]
    )
    await message.answer(
        text=f"ü™ô–¢–æ–≤–∞—Ä: {product} \n üí≥–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å¬ª, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç¬ª –≤ –ö—Ä–∏–ø—Ç–æ-–±–æ—Ç–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º \n ‚ùó–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ç–∏ \n ‚òëÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ \n –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª: üëá",
        reply_markup=keyboard,
    )


# Checks payment
@dp.callback_query()
async def keyboard_callback(callback_query: types.CallbackQuery):
    query = callback_query
    invoice_id = int(query.data)
    result = await DataBase.get_orderdata(invoice_id)
    if result:
        status = await CryptoPay.get_status(invoice_id)
        if status == "active":
            await query.answer("‚åöÔ∏è–ú—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –æ–ø–ª–∞—Ç—É")
        elif status == "paid":
            if result[1] == 'chatgpt':
                await DataBase.update_chatgpt(result[0], invoice_id)
                await query.answer("‚úÖ–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞, —Ç–æ–∫–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç")
            elif result[1] == 'dall_e':
                await DataBase.update_dalle(result[0], invoice_id)
                await query.answer("‚úÖ–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç")
            elif result[1] == 'stable':
                await DataBase.update_stable(result[0], invoice_id)
                await query.answer("‚úÖ–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç")
        elif status == "expired":
            await query.answer("‚ùé–°—Ä–æ–∫ –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.")
    else:
        await query.answer("‚úÖ–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ—é –ø–æ–∫—É–ø–∫—É")


async def main():
    await DataBase.open_pool()
    await dp.start_polling(bot)


if __name__ == '__main__':
    load_dotenv()
    translator = Translator()
    bot = Bot(token=getenv("TELEGRAM_BOT_TOKEN"))
    encoding = encoding_for_model("gpt-3.5-turbo")
    asyncio.run(main())
